#!/bin/bash

# Exit on any error
set -e

# Enable verbose output for debugging
set -x

# Set variables
APP_NAME="SimpleIptvGUI"
VERSION="1.0.0"
PYTHON_VERSION="3.13"  # Matches Python 3.13.5
APPIMAGETOOL_URL="https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage"
LOWERCASE_APP_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]')

# Get current directory
CURRENT_DIR=$(pwd)
echo "Current working directory: $CURRENT_DIR"

# Step 0: Verify system architecture
echo "Verifying system architecture..."
ARCH=$(uname -m)
if [ "$ARCH" != "x86_64" ]; then
    echo "Error: This script is designed for x86_64 architecture, but detected $ARCH"
    exit 1
fi

# Step 1: Check for required dependencies
echo "Checking for required dependencies..."
for cmd in curl magick fusermount python${PYTHON_VERSION} tk; do
    if ! command -v $cmd &>/dev/null; then
        echo "Error: $cmd is not installed. Attempting to install it..."
        sudo pacman -S --noconfirm curl imagemagick fuse2 python tk || {
            echo "Failed to install $cmd. Please install it manually with: sudo pacman -S curl imagemagick fuse2 python tk"
            exit 1
        }
    fi
done

# Check and install pip if not available
echo "Checking for pip..."
if ! command -v pip &>/dev/null; then
    echo "pip not found. Attempting to install python-pip..."
    sudo pacman -S --noconfirm python-pip || {
        echo "Failed to install python-pip. Please install it manually with: sudo pacman -S python-pip"
        exit 1
    }
fi

# Verify pip works with Python 3.13
echo "Verifying pip for Python ${PYTHON_VERSION}..."
if ! python${PYTHON_VERSION} -m pip --version &>/dev/null; then
    echo "Error: pip for Python ${PYTHON_VERSION} is not working. Ensure python-pip is installed correctly."
    echo "Try manually installing with: sudo pacman -S python-pip"
    exit 1
fi

# Check FUSE module
echo "Checking FUSE module..."
sudo modprobe fuse || { echo "Failed to load FUSE module"; exit 1; }
fusermount -V || { echo "FUSE is not working correctly"; exit 1; }

# Step 2: Verify SimpleIptvGUI.py exists
echo "Checking for SimpleIptvGUI.py in $CURRENT_DIR..."
if [ ! -f "$CURRENT_DIR/SimpleIptvGUI.py" ]; then
    echo "Error: SimpleIptvGUI.py not found in $CURRENT_DIR"
    ls -l "$CURRENT_DIR"
    exit 1
fi
SCRIPT_PATH="$CURRENT_DIR/SimpleIptvGUI.py"
echo "Found SimpleIptvGUI.py at $SCRIPT_PATH"

# Step 3: Create working directory
echo "Creating AppDir..."
mkdir -p $APP_NAME.AppDir/usr/src
mkdir -p $APP_NAME.AppDir/usr/lib/python${PYTHON_VERSION}/site-packages
cd $APP_NAME.AppDir || { echo "Failed to enter $APP_NAME.AppDir"; exit 1; }

# Step 4: Install Python dependencies
echo "Installing cloudscraper and requests..."
python${PYTHON_VERSION} -m pip install cloudscraper --no-deps --target=./usr/lib/python${PYTHON_VERSION}/site-packages || { echo "Failed to install cloudscraper"; exit 1; }
python${PYTHON_VERSION} -m pip install requests --target=./usr/lib/python${PYTHON_VERSION}/site-packages || { echo "Failed to install requests"; exit 1; }

# Step 5: Copy the Python script
echo "Copying SimpleIptvGUI.py..."
cp "$SCRIPT_PATH" usr/src/SimpleIptvGUI.py || { echo "Failed to copy SimpleIptvGUI.py"; exit 1; }

# Step 6: Create AppRun
echo "Creating AppRun..."
cat << EOF > AppRun
#!/bin/sh
SELF=\$(readlink -f "\$0")
HERE=\${SELF%/*}
export PYTHONPATH="\${HERE}/usr/lib/python${PYTHON_VERSION}/site-packages:\$PYTHONPATH"
exec python${PYTHON_VERSION} "\${HERE}/usr/src/SimpleIptvGUI.py" "\$@"
EOF
chmod +x AppRun

# Step 7: Create desktop file
echo "Creating desktop file..."
cat << EOF > $LOWERCASE_APP_NAME.desktop
[Desktop Entry]
Name=$APP_NAME
Exec=$LOWERCASE_APP_NAME
Type=Application
Terminal=false
Categories=Utility;
Icon=$LOWERCASE_APP_NAME
Comment=Simple IPTV Scanner GUI
X-AppImage-Version=$VERSION
EOF

# Step 8: Create a basic icon
echo "Creating placeholder icon..."
mkdir -p usr/share/icons/hicolor/128x128/apps
magick -size 128x128 xc:transparent -fill blue -draw "circle 64,64 60,60" usr/share/icons/hicolor/128x128/apps/$LOWERCASE_APP_NAME.png || { echo "Failed to create icon"; exit 1; }
cp usr/share/icons/hicolor/128x128/apps/$LOWERCASE_APP_NAME.png .

# Step 9: Download and run appimagetool
cd ..
echo "Downloading appimagetool..."
curl -L --fail -o appimagetool-x86_64.AppImage "$APPIMAGETOOL_URL" || { echo "Failed to download appimagetool"; exit 1; }
chmod +x appimagetool-x86_64.AppImage
echo "Testing appimagetool..."
./appimagetool-x86_64.AppImage --version || { echo "appimagetool failed to run"; exit 1; }
echo "Running appimagetool..."
ARCH=x86_64 ./appimagetool-x86_64.AppImage -v $APP_NAME.AppDir $APP_NAME-$VERSION-x86_64.AppImage || { echo "appimagetool failed to create AppImage"; exit 1; }

# Step 10: Clean up
echo "Cleaning up..."
rm appimagetool-x86_64.AppImage
echo "AppImage created: $APP_NAME-$VERSION-x86_64.AppImage"
echo "Run it with: ./$APP_NAME-$VERSION-x86_64.AppImage"